// 提取的公共build文件，用于统一版本和配置
// 使用此文件使用 apply from: '[路径/文件名]'
// 各个library或module可以覆盖配置
// 注意文件路径
//https://developer.android.google.cn/studio/build
//versions及dependencies定义在gradle文件夹下version.gradle中，调用在project的build.gradle的buildscript内

android {
    compileSdkVersion rootProject.ext.versions['compileSdkVersion']
    buildToolsVersion rootProject.ext.versions['buildToolsVersion']

    def versionCode4Release = rootProject.ext.versions['versionCode']
    def versionCode4Debug = rootProject.ext.versions['versionCode4Debug']

    defaultConfig {

        /*library不能设置applicationId，而module可以不设置使用默认值*/
        /*applicationId rootProject.ext.versions['applicationId']*/
        minSdkVersion rootProject.ext.versions['minSdkVersion']
        targetSdkVersion rootProject.ext.versions['targetSdkVersion']
        //默认的versionCode是debug，在输出release包时可以取消applicationVariants.all的注释以自动更改release的versionCode
        /*versionCode versionCode4Debug*/
        versionCode versionCode4Release
        versionName rootProject.ext.versions['versionName']

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    def path = "key/key.properties"
    def keyProperties = findAndLoadKey(path)

    signingConfigs {
        if (keyProperties != null) {
            release {
                storeFile file(keyProperties['keyFile'])
                storePassword keyProperties['storePassword']
                keyAlias keyProperties['keyAlias']
                keyPassword keyProperties['keyPassword']
            }
        }
    }

    def versionCodeNotice = '"注意：打包出来的文件的versionCode可能会被更改，应从PackageManager中获取"'

    buildTypes {
        release {
            if (keyProperties != null) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            zipAlignEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'int', 'VERSION_CODE_4_RELEASE', "${versionCode4Release}"
            buildConfigField 'int', 'VERSION_CODE_4_DEBUG', "${versionCode4Debug}"
            buildConfigField 'String', 'VERSION_CODE_NOTICE', "${versionCodeNotice}"
            buildConfigField "boolean", "DEBUG_MODE", "false"
        }
        debug {
            if (keyProperties != null) {
                signingConfig signingConfigs.release
            }
            debuggable true
            buildConfigField 'int', 'VERSION_CODE_4_RELEASE', "${versionCode4Release}"
            buildConfigField 'int', 'VERSION_CODE_4_DEBUG', "${versionCode4Debug}"
            buildConfigField 'String', 'VERSION_CODE_NOTICE', "${versionCodeNotice}"
            buildConfigField "boolean", "DEBUG_MODE", "true"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    /*module*/
    /*applicationVariants.all { variant ->
        setupModuleApk(variant, false, versionCode4Release)
    }*/
    /*alternatively*/
    /*lib*/
    /*libraryVariants.all { variant ->
        setupModuleApk(variant, true)
    }*/
}

private def findAndLoadKey(path) {
    def keyProperties = null
    try {
        def keystorePropertiesFile = rootProject.file(path)
        if (keystorePropertiesFile.exists()) {
            keyProperties = new Properties()
            keyProperties.load(new FileInputStream(keystorePropertiesFile))
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
    keyProperties
}

static def setupModuleApk(variant, isLib, versionCode) {
    if (variant == null) {
        return
    }
    variant.outputs.each { output ->
        // 正式版下设置versionCode，参见gitVersion.gradle
        // 正式版更改输出app文件名，debug下不更改打包文件名，避免build生成的app文件越来越多
        if (!variant.getBuildType().isDebuggable()) {
            // 修改打包时versionCode的值
            // 此修改只对打包出来的apk有效，对直接运行的app无效
            // 且不会更改BuildConfig里的VERSION_CODE
            // 修改后的versionCode需要从PackageManager中获取
            output.versionCodeOverride = versionCode
            def date = new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("GMT+08"))
            // 文件名前缀 + 渠道名
            def startName = "app_${variant.flavorName}_${date}"
            // 文件名后缀
            def endName
            if (isLib) {
                endName = "_${variant.versionName}_${variant.versionCode}.aar"
            } else {
                endName = "_${variant.versionName}_${variant.versionCode}.apk"
            }
            output.outputFileName = startName + endName
        }
    }

}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation rootProject.ext.dependencies['appcompat']

    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
