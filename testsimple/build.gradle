def runAlone() {
    return rootProject.ext.component['testSimpleRunAlone']
}

if (runAlone()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

apply from: '../gradle/commonbuildktx.gradle'

android {
    buildFeatures {
        dataBinding = true
    }
    sourceSets {
        main {
            if (runAlone()) {
                manifest.srcFile 'src/main/component/AndroidManifest.xml'
                java.srcDirs = ['src/main/java', 'src/main/component/java']
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    exclude 'component/**'
                }
            }
        }
    }
}

kapt {
    correctErrorTypes true
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas".toString())
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

dependencies {
    implementation project(path: ':common')
    kapt rootProject.ext.dependencies['arouter_compiler']

    implementation rootProject.ext.dependencies['paging']
    implementation rootProject.ext.dependencies['lifecycle_runtime_ktx']
    implementation rootProject.ext.dependencies['viewmodel_ktx']
    kapt rootProject.ext.dependencies['lifecycle_compiler_java8']

    implementation rootProject.ext.dependencies['hilt']
    implementation rootProject.ext.dependencies['hilt_viewmodel']
    kapt rootProject.ext.dependencies['hilt_viewmodel_compiler']
    kapt rootProject.ext.dependencies['hilt_compiler']

    implementation rootProject.ext.dependencies['room_ktx']
    kapt rootProject.ext.dependencies['room_compiler']

    implementation rootProject.ext.dependencies['work_ktx']
    debugImplementation rootProject.ext.dependencies['work_test']

    implementation rootProject.ext.dependencies['okhttp']
    implementation rootProject.ext.dependencies['okhttp_interceptor']

    implementation rootProject.ext.dependencies['retrofit']
    implementation rootProject.ext.dependencies['retrofit_gson']

    implementation rootProject.ext.dependencies['gson']

    implementation rootProject.ext.dependencies['glide']

    debugImplementation rootProject.ext.dependencies['leakcanary']
}