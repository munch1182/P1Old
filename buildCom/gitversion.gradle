/*
 需要先对git进行全局设置
 需要git命令行支持
 通过git提交的次数和tag当作versionCode和VersionName
 */

/**
 * 获取当前分支的提交次数，失败则会抛出异常
 */
static def getGitCommitCount() throws IOException, NumberFormatException {
    'git rev-list HEAD --count'.execute().text.toInteger()
}

/**
 * 获取当前git的tag的个数，失败则会抛出异常
 */
static def getGitTagCount() throws IOException, NumberFormatException {
    'git tag --list'.execute().text.trim().size()
}

/**
 * 获取离当前提交最近的tag描述
 * 将返回tag的内容
 * git tag命令：git tag -a "[tag_name]" -m "[tag_message]"
 * 建议tag_name为1.0,1.1等两个版本的名称，因为会拼凑该tag提交次数到末尾
 */
static def getGitTagName() throws IOException {
    'git describe --tags'.execute().text.trim()
}

/**
 * 获取git提交的tag次数，失败则返回1
 */
static def getGitCommitCountOrOne() {
    def versionCode = 0
    try {
        versionCode = getGitCommitCount()
    } catch (IOException e) {
        e.printStackTrace()
    } catch (NumberFormatException e) {
        e.printStackTrace()
    }
    if (versionCode == 0) {
        versionCode = 1
    }
    return versionCode
}


/**
 * 拼凑versionCode，其值为tag数量*1000+该tag提交次数
 * 失败则返回1
 */
static def getGitVersionCode() {
    def versionCode = 0
    try {
        versionCode = getGitTagCount() * 1000 + getGitCommitCount()
    } catch (IOException e) {
        e.printStackTrace()
    } catch (NumberFormatException e) {
        e.printStackTrace()
    }
    if (versionCode == 0) {
        versionCode = 1
    }
    return versionCode
}

/**
 * 拼凑versionName
 * 结果如"v0.1.33" => v0.1为tag，33为此tag的提交次数
 * 此处使用正式版的版本名
 */
static def getGitVersionName() {
    def versionName = null
    try {
        versionName = getGitTagName()
        //进行局部匹配，返回java.util.regex.Matcher对象
        //匹配:(一个字符)(数字).(数字)
        def matcher = versionName =~ "^.?\\d\\.\\d+"
        if (matcher) { //调用的是matcher.find()方法
            versionName = versionName.substring(matcher.start(), matcher.end()) + "." + getGitCommitCountOrOne()
        }
    } catch (IOException e) {
        e.printStackTrace()
    } catch (StringIndexOutOfBoundsException e) {
        e.printStackTrace()
    }

    if (versionName == null || versionName.length() == 0) {
        versionName = "1.0"
    }
    return versionName
}

ext {
    gitVersion = [
            versionCode: getGitVersionCode(),
            versionName: getGitVersionName()
    ]
}